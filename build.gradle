import java.text.SimpleDateFormat

apply from: 'buildsystem/dependencies.gradle'

buildscript {
	ext {
		kotlinVersion = '1.2.70'
		gradleToolsVersion = '3.2.0-rc03'
		buildToolsVersion = '28.0.2'

		minSdk = 21
		targetSdk = 28
		compileSdk = 28

		applicationId = 'com.socros.android.app.gitez'
		testRunner = 'android.support.test.runner.AndroidJUnitRunner'
	}

	repositories {
		google()
		jcenter()
	}

	dependencies {
		classpath "com.android.tools.build:gradle:$gradleToolsVersion"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
	}
}

allprojects {
	repositories {
		google()
		jcenter()
	}
}

task clean(type: Delete) {
	delete rootProject.buildDir
}

static def generateVersionName() {
	if (getCurrentBranch() == "master") {
		return "${getLastMasterGitTagVersion()}"
	} else {
		return "${getBuildDate()} #${getGitCommitsCount()}.${getGitSha()}.${getCurrentBranch()}"
	}
}

static def generateVersionCode() {
	return getGitCommitsCount().toInteger()
}

static def getBuildDate() {
	def df = new SimpleDateFormat("dd.MM.''yy")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

static def getGitCommitsCount() {
	return ("git rev-list ${getCurrentBranch()} --count").execute().text.trim()
}

static def getGitSha() {
	return "git rev-parse --verify --short HEAD".execute().text.trim()
}

static def getCurrentBranch() {
	return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

static def getLastMasterGitTagVersion() {
	def longVersionName = "git describe --tags master --long".execute().text.replace("v", "").trim()
	def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
	// TODO simplify git tag version usage
	// return fullVersionTag
	def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')

	return sprintf("%s.%s.%s", [versionMajor, versionMinor, versionPatch])
}

